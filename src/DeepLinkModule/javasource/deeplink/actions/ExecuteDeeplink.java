// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package deeplink.actions;

import java.net.URLDecoder;
import java.nio.charset.StandardCharsets;
import java.util.*;
import java.util.Map.Entry;
import java.util.stream.Collectors;
import com.mendix.core.Core;
import com.mendix.core.CoreException;
import com.mendix.core.actionmanagement.MicroflowCallBuilder;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.systemwideinterfaces.core.IDataType;
import com.mendix.systemwideinterfaces.core.IFeedback.MessageType;
import com.mendix.systemwideinterfaces.core.IMendixObject;
import com.mendix.webui.CustomJavaAction;
import com.mendix.webui.FeedbackHelper;
import deeplink.proxies.DeepLink;

/**
 * Executes a Pendlinglink, i.e. executes the corressponding microflow.
 * Returns true if a link was executed, false otherwise.
 * If this action returns true, no further actions should be taken in the current context.
 */
public class ExecuteDeeplink extends CustomJavaAction<java.lang.Boolean>
{
	private IMendixObject __pendinglink;
	private deeplink.proxies.PendingLink pendinglink;

	public ExecuteDeeplink(IContext context, IMendixObject pendinglink)
	{
		super(context);
		this.__pendinglink = pendinglink;
	}

	@java.lang.Override
	public java.lang.Boolean executeAction() throws Exception
	{
		this.pendinglink = __pendinglink == null ? null : deeplink.proxies.PendingLink.initialize(getContext(), __pendinglink);

		// BEGIN USER CODE
		try {
			if (this.pendinglink == null) {
				StartDeeplinkJava.logger.warn("Pending link not found");
				return false;
			}

			DeepLink link = this.pendinglink.getPendingLink_DeepLink();

			if (link == null) {
				StartDeeplinkJava.logger.warn("Pending link found, but there was no associated deeplink for user: " + this.pendinglink.getUser());
				return false;
			}

			IMendixObject arg = null;
			if (!link.getUseStringArgument() && link.getObjectType() != null && !link.getObjectType().isEmpty())
			{
				try {
					arg = Core.retrieveId(getContext(), Core.createMendixIdentifier(this.pendinglink.getArgument()));
				} catch (CoreException e) {
					StartDeeplinkJava.logger.warn("Unable to retrieve " + this.pendinglink.getArgument(), e);
				}
				if (arg == null)
				{
				    FeedbackHelper.addTextMessageFeedback(this.getContext(), MessageType.WARNING, "DeepLink failed to load link, since the object with ID " + this.pendinglink.getArgument() + " no longer exists or the user has no access to read the object", false);
					return false;
				}
			}

			//invoke the microflow
			try {
				//object argument
				if (arg != null) {
					List<String> attributes = Core.getInputParameters(link.getMicroflow()).entrySet()
							.stream()
							.filter(entry -> link.getObjectType().equals(entry.getValue().getObjectType()))
							.map(Entry::getKey).collect(Collectors.toList());

					MicroflowCallBuilder microflowCallBuilder = Core.microflowCall(link.getMicroflow());

					if (attributes.size() > 0) {
						microflowCallBuilder = microflowCallBuilder.withParam(attributes.get(0), arg);
					}

					if (attributes.size() > 1) {
						StartDeeplinkJava.logger.warn("2 parameters of the same type were found. We will use the first one.");
					}

					microflowCallBuilder.inTransaction(true).execute(getContext());
				//string argument
                } else if (link.getUseStringArgument()) {
                    Map<String, IDataType> params = Core.getInputParameters(link.getMicroflow());
                    Map<String, Object> args = new HashMap<>();
                    String allArguments = this.pendinglink.getStringArgument();
                    
                    // If we should separate the GET params, and there is at least one, process them
                    if (link.getSeparateGetParameters() && (allArguments.contains("=") || allArguments.contains("&"))) {
                        String[] arguments = allArguments.split("&");
                        for (String argument : arguments) {
                            processArgument(argument, params, args);
                        }
                    // When we don't have a = or & in the arguments, there is no get param
                    // Or if we shouldn't separate, just put the entire string in the first String argument
                    } else {
                        for (Entry<String, IDataType> keyset : params.entrySet()) {
                            if (keyset.getValue().getType() == IDataType.DataTypeEnum.String) {
                                args.put(keyset.getKey(), allArguments);
                                break;
                            }
                        }
                    }

					Core.microflowCall(link.getMicroflow()).withParams(args).execute(getContext());
                } else { //no argument
					Core.microflowCall(link.getMicroflow()).execute(getContext());
				}

			} catch (Exception e) {
			    FeedbackHelper.addTextMessageFeedback(this.getContext(), MessageType.WARNING, "Failed to execute microflow for deeplink " + link.getName() + ", check the log for details", false);
				StartDeeplinkJava.logger.error("Failed to execute deeplink " + link.getName(), e);
				return false;
			}


			//remove the pendinglink, unless it should be reused during this session..
			if (link.getUseAsHome()) { //do not remove if used as home.
				this.pendinglink.setSessionId(this.getContext().getSession().getId().toString());
				Core.commit(this.getContext(), this.pendinglink.getMendixObject());
			}
			else {
				Core.delete(this.getContext(), this.pendinglink.getMendixObject());
			}

			//set hitcount (note, this might not be exact)
			IContext sudoContext = getContext().createSudoClone();
			link.setHitCount(sudoContext, link.getHitCount(getContext().createSudoClone()) + 1);
			Core.commit(sudoContext, link.getMendixObject());

			return true;
		}
		catch (Exception e)
		{
		    FeedbackHelper.addTextMessageFeedback(this.getContext(), MessageType.ERROR, "General error while evaluating deeplink:\n" + e.getMessage(), true);
			StartDeeplinkJava.logger.error("General error while evaluating deeplink: " + e.getMessage(), e);
			return false;
		}
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "ExecuteDeeplink";
	}

	// BEGIN EXTRA CODE
	private static void processArgument(String argument, Map<String, IDataType> params, Map<String, Object> args) {
		// skip empty arguments
	    if( "".equals(argument) )
			return;

		String key;
		String value = "";
		if( argument.contains("=") ) {
			key = argument.substring(0, argument.indexOf("=") );
			value = argument.substring( argument.indexOf("=")+1 );
		} else {
			key = argument;
			// value = empty string
		}

		if( params.containsKey(key) ) {
		    // if already exists (array get param), concat to end.
		    if (args.containsKey(key)) {
		        value = args.get(key) + "-" + value;
		    }
		    args.put(key, value);
		    StartDeeplinkJava.logger.trace("Adding parameter: " + key + " and value: " + value );
		} else { //Fallback to check the parameter case insensitive
			boolean paramMatched = false;
			for( Entry<String,IDataType> param : params.entrySet() ) {
			    String testKey = param.getKey();
				if( testKey.equalsIgnoreCase(key) ) {
					if (args.containsKey(testKey)) {
					    value = args.get(testKey) + "-" + value;
					}
				    args.put(param.getKey(), value);

				    StartDeeplinkJava.logger.trace("Adding parameter: " + param.getKey() + " from key: " + key + " and value: " + value );

					paramMatched = true;
					break;
				}
			}
			if( !paramMatched )
				StartDeeplinkJava.logger.warn("Parameter: (" + key + ") found, but no matching mf parameter exists");
		}

	}
	// END EXTRA CODE
}
